name: Build and Release Go project

on:
  push:
    branches:
      - main  # 对 main 分支发布正式版本
      - dev   # 对 dev 分支发布预发布版本

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.23']
        os: 
          - { goos: 'linux', goarch: 'amd64', os-name: 'linux-amd64' }
          - { goos: 'linux', goarch: 'arm64', os-name: 'linux-arm64' }

    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ matrix.os.os-name }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go-version }}-${{ matrix.os.os-name }}

      - name: Install dependencies
        run: |
          go mod download

      - name: Build for ${{ matrix.os.os-name }}
        env:
          GOOS: ${{ matrix.os.goos }}
          GOARCH: ${{ matrix.os.goarch }}
        run: |
          go build -o output/${{ matrix.os.os-name }}/YASS-${{ matrix.os.os-name }} main.go

      - name: Upload binaries as artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.os.os-name }}-binary
          path: output/${{ matrix.os.os-name }}/YASS-${{ matrix.os.os-name }}

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set release version
        id: version
        run: |
          # 如果是 main 分支，使用最新的 git tag 作为版本号
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            git fetch --tags
            VERSION=$(git describe --tags --abbrev=0)
            echo "::set-output name=VERSION::$VERSION"
          else
            # 否则使用 commit SHA 作为 prerelease 版本号
            echo "::set-output name=VERSION::${{ github.sha }}"
          fi

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ steps.version.outputs.VERSION }}
          release_name: "Release ${{ steps.version.outputs.VERSION }}"
          body: |
            This release was automatically generated.
            - Branch: ${{ github.ref }}
            - Commit: ${{ github.sha }}
          draft: false
          prerelease: ${{ github.ref == 'refs/heads/dev' }}  # dev 分支为 prerelease，main 分支为正式版

      - name: Upload Linux-amd64 binary to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: output/linux-amd64/main
          asset_name: main-linux-amd64
          asset_content_type: application/octet-stream

      - name: Upload Linux-arm64 binary to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: output/linux-arm64/main
          asset_name: main-linux-arm64
          asset_content_type: application/octet-stream
